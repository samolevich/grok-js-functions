// Обычные функции
// 100. Объявите функцию с именем foo.

const foo = () => {};


// 102. Объявите именнованную функцию foo со входящим параметром x. Обозначьте границы тела функции и границы объявления параметров

function foo(x) // объявление параметра х
    { /* тело функции */ }


    // 104. Объявите функцию foo, которая возвращает число 42. Обозначьте границы объявления параметров функции.

function foo() // здесь проходит граница объявления параметров функции
    {return 42;}


    // 106. Объявите анонимную не стрелочную функцию. Где у данной функции имя?

function() {} // анонимная функция не имеет имени


// 108. Объявите функцию без имени.

function () {}


// 110. Объявите стрелочную функцию. Где у данной функции границы тела и границы объявления параметров?

const forExample = (
    // объявление параметров
) {
    // тело функции
}


// 112. Присвойте переменной f функцию foo. Где у данной функции границы тела? Что находится внутри f?

function foo() {/* тело функции */}

let f = foo() // в переменной f находится функция foo()


// 114. Присвойте переменной f анонимную не стрелочную функцию.

let f = function() {};


// 116. Присвойте переменной f стрелочную функцию. Что находится внутри f?

const forExample = () => {};
let f = forExample(); // в переменной находится функция


// 118. Объявите функцию foo со входящим параметром x, которая удваивает то, что ей передали на вход.

const foo = x => x * 2; 


// 120. Объявите функцию foo со входящим параметром x, которая удваивает то, что ей передали на вход. Вызовите данную функцию со входящим значением 4. Где у данной функции параметры? А где аргументы? Обозначьте границы тела функции.

const foo = x => x * 2; // выражение 'x * 2' - тело функции

foo(4); // в параметр 'x' функции foo передается аргумент '4'


// 122. Объявите анонимную не стрелочную функцию, которая суммирует два входящих значения. Где у данной функции параметры? Где аргументы?

function(x, y) {return x + y} // x и y - являются параметрами. аргументы не заданы


// 124. Объявите анонимную самовызывающуюся стрелочную функцию, которая суммирует два входящих значения. Передайте ей на вход 3 и 6. Каков результат выполнения функции? Где у данной функции параметры? Где аргументы?

((x, y) => (a + b)) (3, 6) // в параметры 'x, y' передаются аргументы '3, 6' и дают результат 9


// 126. Объявите функцию foo со входящим параметром x. Вызовите функцию со входящим значением 42. Каков результат выполнения функции? Где у данной функции параметры? Где аргументы? Чему равно x.

const foo = x => ();

foo(42); // аргумент '42' был передан в качестве параметра 'x' функции foo. Функция не выполняет ничего.


// 128. Объявите функцию foo со входящим параметром x. Вызовите функцию со входящими значениями 42 и 7. Сколько у функции параметров? А сколько аргументов? Чему равен x? Каков результат выполнения функции?

function foo(x) {}

function foo(42, 7) // у функции один параметр, а передается два аргумента. 'x' - определен как 42, второй агрумент не определен - undefined


// 130. Объявите функцию foo со входящими параметрами x, y. Вызовите функцию со входящим значением 42. Сколько у функции параметров? А сколько аргументов? Чему равен x? Чему равен y? Каков результат выполнения функции?

const foo = (x, y) => ();

foo(42) // функция foo имеет два параметра и на вход получает один аргумент. 'x' определен как 42, а 'y' - не определен - undefined
подглядел


// 132. Объявите функцию foo, которая суммирует первые два значения, поданные ей на вход. Вызовите foo со входящими значениями 1, 2, 3. Сколько у функции параметров? А сколько аргументов? Каков результат выполнения функции?

const foo = (x, y) => (x + y);

foo(1, 2, 3) // два параметра и три аргумента. результат 3